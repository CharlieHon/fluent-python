"""
默认情况下，Python在各个实例中名为 __dict__ 的字典里存储实例属性。为了使用底层的散列表提升访问速度，字典会消耗大量内存。
如果要处理数百万个属性不多的实例，通过 __slots__ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。

继承自超类的 __slots__ 属性没有效果，Python只会使用各个类中定义的 __slots__ 属性。

定义 __slots__ 的方式是，创建一个类属性，使用 __slots__ 这个名字，并把它的值设为一个字符串构成的可迭代对象，其中各个元素表示各个实例属性。

"""

class Vector2d:
    __slots__ = ('__x', '__y')  # 告诉解释器：这个类中所有实例属性都在这儿。Python会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 __dict__ 属性。

    typecode = 'd'

    # 剩余方法同前


"""
在类中定义 __slots__ 属性之后，实例不能再有 __slots__ 中所有名称之外的其它属性。这只是一个副作用，不要使用 __slots__ 属性禁止类的用户新增实例属性。
如果把 '__dict__' 这个名称添加导 __slots__ 中，实例会在元组中保存各个实例的属性，此外还支持动态创建属性，这些属性存储在常规的 __dict__ 中。

为了让对象支持弱引用，必须有 __weakref__ 属性。用户定义的类中默认就有 __weakref__ 属性。
但如果类中定义了 __slots__ 属性，而且想把实例作为弱引用的目标，那么要把 '__weakref__' 添加到 __slots__ 中。
"""

"""
__slots__ 的问题

- 每个子类都要定义 __slots__ 属性，因为解释器会忽略继承 __slots__ 属性。
- 实例只能拥有 __slots__ 中列出的属性，除非把 '__dict__' 加入到 __slots__ 中(这样做就失去了节省内存的功效)
- 如果不把 '__weakref__' 加入 __slots__ ，实例就不能作为弱引用的目标。
"""
