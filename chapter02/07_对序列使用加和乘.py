# 通常+号两侧的序列由相同类型的数据构成，在拼接过程中，两个被操作的序列都不会被修改，Python会新建一个包含同样类型数据的序列作为拼接结果
a = [1, 2, 3]
b = [4, 5]
print(a + b)    # [1, 2, 3, 4, 5]
# 序列乘以一个整数，可以将一个序列复制几份再拼接起来
l = [2, 3]
print(l * 3)    # [2, 3, 2, 3, 2, 3]
print(2 * 'abcd')   # 'abcdabcd'

# 序列的增量赋值
# +=背后的特殊方法是__iadd__('就地加法')，如果一个类没有实现这个方法，Python会退一步调用__add__
# 可变序列一般都实现了__iadd__方法，因此+=是就地加法
# 不可变序列不支持此操作，a+=b效果同a=a+b，计算a+b并赋给一个新对象a
l = [1, 2, 3]
print(id(l))    # 2052965181312
l *=2
print(id(l))    # 2052965181312
t = (1, 2, 3)
print(id(t))    # 2052964733440
t *= 2
print(id(t))    # 2052964209568

# 一个关于+=的谜题
t = (1, 2, [30, 40])
t[2] += [50, 60]
# t[2].extend([50, 60])   # 能避免出现异常
print(t)    # tuple是不可变类型，不支持对它的元素赋值，会抛出异常，但是t会变成(1, 2, [30, 40, 50, 60])
